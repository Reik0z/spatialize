name: Upload Release

run-name: Building and uploading release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build-linux:
    runs-on: ubuntu-latest
 
    permissions:
      contents: write

    strategy:
      matrix:
        python: ["3.9", "3.x"]
 
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
 
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
 
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Get WHL
        run: echo "WHEEL_FILE=$(ls dist/*.whl)" >> $GITHUB_ENV

      - name: Install whl
        run: pip install ${{ env.WHEEL_FILE }}
 
      - name: Run example script
        run: python examples/scripted_examples/esi_3d_nongriddata.py

      - name: Upload Linux dist
        uses: actions/upload-artifact@v4
        with:
          name: dist-linux
          path: dist/
          overwrite: true
    
  build-windows:
    runs-on: windows-latest

    permissions:
      contents: write

    strategy:
      matrix:
        python: ["3.9", "3.x"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install build

      - name: Build project (Windows)
        run: python -m build

      - name: Get whl
        run: echo "WHEEL_FILE=$(Get-ChildItem dist\*.whl | Select-Object -ExpandProperty FullName)" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Install whl
        run: pip install "$env:WHEEL_FILE"
        shell: pwsh

      - name: Test
        run: python examples/scripted_examples/esi_3d_nongriddata.py

      - name: Upload Windows dist
        uses: actions/upload-artifact@v4
        with:
          name: dist-windows
          path: dist/
          overwrite: true

  build-macos:
    runs-on: macos-latest

    permissions:
      contents: write

    strategy:
      matrix:
        python: ["3.9", "3.x"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install build

      - name: Build project (macOS)
        run: python -m build

      - name: Get WHL
        run: echo "WHEEL_FILE=$(ls dist/*.whl)" >> $GITHUB_ENV

      - name: Install whl
        run: pip install ${{ env.WHEEL_FILE }}

      - name: Test
        run: python examples/scripted_examples/esi_3d_nongriddata.py

      - name: Upload macOS dist
        uses: actions/upload-artifact@v4
        with:
          name: dist-macos
          path: dist/
          overwrite: true

  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs:
      - build-linux
      - build-windows
      - build-macos
  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
  
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
  
      - name: Extract version
        id: get_version
        run: |
          VERSION=$(python -c "import re; f = open('src/python/spatialize/_version.py').read(); print(re.search(r'__version__ = [\"\']([^\"\']+)[\"\']', f).group(1))")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          path: dist
  
      - name: Upload assets to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/dist-linux/**
          name: Release v${{ steps.get_version.outputs.version }}
          tag_name: v${{ steps.get_version.outputs.version }}
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install twine
        run: pip install twine

      - name: Upload to Pypi
        run: twine upload --repository-url https://test.pypi.org/legacy/ dist/* --verbose
