name: Upload Release

run-name: Building and uploading release

on:
  push:
    branches: [ feature/actions-test ]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install spatialize build

      - name: Build project (Linux)
        run: python -m build

      - name: Upload Linux dist
        uses: actions/upload-artifact@v4
        with:
          name: dist-linux
          path: dist/

  # build-windows:
  #   runs-on: windows-latest
  #   permissions:
  #     contents: write

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.x'

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt
  #         pip install spatialize build

  #     - name: Build project (Windows)
  #       run: python -m build

  #     - name: Upload Windows dist
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: dist-windows
  #         path: dist/

  # build-macos:
  #   runs-on: macos-latest
  #   permissions:
  #     contents: write

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.x'

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt
  #         pip install spatialize build

  #     - name: Build project (macOS)
  #       run: python -m build

  #     - name: Upload macOS dist
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: dist-macos
  #         path: dist/

  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs:
      - build-linux
      # - build-windows
      # - build-macos
  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
  
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
  
      - name: Extract version
        id: get_version
        run: |
          VERSION=$(python -c "import re; f = open('src/python/spatialize/_version.py').read(); print(re.search(r'__version__ = [\"\']([^\"\']+)[\"\']', f).group(1))")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Display files
        run: ls -R

      - name: Delete previously uploaded assets
        run: |
          ASSET_NAME="spatialize-${{ steps.get_version.outputs.version }}.tar.gz"
          ASSET_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/assets" | \
          jq -r '.[] | select(.name == "'"$ASSET_NAME"'") | .id')

          if [ -z "$ASSET_ID" ]; then
            echo "Asset $ASSET_NAME not found, skipping deletion."
          else
            curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID"
          fi
  
      - name: Upload assets to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/dist-linux/**
          name: Release v${{ steps.get_version.outputs.version }}
          tag_name: v${{ steps.get_version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
